# Use an Ubuntu-based image with OpenJDK 17
FROM ubuntu:22.04

# Define default user configuration
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG USERNAME=insight

# Create a non-root user
RUN groupadd -g ${GROUP_ID} ${USERNAME} && \
    useradd -m -u ${USER_ID} -g ${GROUP_ID} -s /bin/bash ${USERNAME}

# Install basic tools and dependencies
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk \
    qemu-system-x86 \
    qemu-kvm \
    xvfb \
    curl \
    wget \
    unzip \
    gnupg \
    git \
    libgtk-3-0 \
    libgl1-mesa-glx \
    adb \
    maven \
    python3-pip \
    lib32stdc++6 \
    libpulse0 \
    xz-utils \
    libx11-xcb1 \
    libxcb-dri3-0 \
    libxcomposite1 \
    libxrandr2 \
    libasound2 \
    libxdamage1 \
    libgbm1 \
    zip \
    zlib1g \
    ca-certificates \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Node.js and Appium
RUN wget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz \
    && tar -xf node-v18.17.1-linux-x64.tar.xz \
    && mv node-v18.17.1-linux-x64 /usr/local/node \
    && ln -s /usr/local/node/bin/node /usr/bin/node \
    && ln -s /usr/local/node/bin/npm /usr/bin/npm \
    && ln -s /usr/local/node/bin/npx /usr/bin/npx

RUN npm install -g appium@latest \
    && npm install -g appium-doctor


# Download and set up Android SDK
RUN mkdir -p /opt/android-sdk/cmdline-tools \
    && wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/cmdline-tools.zip \
    && unzip /tmp/cmdline-tools.zip -d /opt/android-sdk/cmdline-tools \
    && mv /opt/android-sdk/cmdline-tools/cmdline-tools /opt/android-sdk/cmdline-tools/latest \
    && rm /tmp/cmdline-tools.zip

# Set environment variables
ARG ANDROID_HOME=/opt/android-sdk
ENV ANDROID_HOME=${ANDROID_HOME}
ENV ANDROID_AVD_HOME=/home/${USERNAME}/.android/avd
ENV ANDROID_EMULATOR_HOME=/home/${USERNAME}/.android
ENV PATH="/usr/local/node/bin:/usr/local/lib/node_modules/.bin:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${PATH}"

# Install Android SDK components
RUN yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

RUN $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
    "platform-tools" \
    "platforms;android-33" \
    "build-tools;33.0.2" \
    "system-images;android-33;google_apis_playstore;x86_64" \
    "emulator"

# Create AVD (Android Virtual Device)
RUN mkdir -p /home/${USERNAME}/.android/avd && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.android && \
    su - ${USERNAME} -c "echo 'no' | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
    -n android_33 \
    -k 'system-images;android-33;google_apis_playstore;x86_64' \
    --device 'pixel_4'"


# Install Appium driver
RUN su - ${USERNAME} -c "export ANDROID_HOME=/opt/android-sdk && \
    export PATH=/usr/local/node/bin:\$ANDROID_HOME/cmdline-tools/latest/bin:\$ANDROID_HOME/platform-tools:\$PATH && \
    appium driver install uiautomator2"


# Ensure /dev/kvm has the correct permissions
RUN chmod 666 /dev/kvm || true

# Set environment variables for Xvfb
ENV DISPLAY=:99

# Expose necessary ports
EXPOSE 4723
EXPOSE 8200

# Switch to the non-root user
USER ${USERNAME}

# Set the working directory inside the container
WORKDIR /app

# Copy project files to container
COPY . /app

